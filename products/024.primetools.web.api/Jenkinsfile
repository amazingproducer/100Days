void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/amazingproducer/100Days"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building'
                sh 'python3 -m venv products/024.primetools.web.api/venv'
                sh '. products/024.primetools.web.api/venv/bin/activate'
                sh 'python3 -m pip install -r /var/lib/jenkins/workspace/jfile-100D-PrimeTools-API/products/024.primetools.web.api/requirements.txt'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing'
                sh 'pytest --doctest-modules --disable-warnings --disable-pytest-warnings /var/lib/jenkins/workspace/jfile-100D-PrimeTools-API/products/024.primetools.web.api/flask_api.py'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying'
                sh 'pdoc --html /var/lib/jenkins/workspace/jfile-100D-PrimeTools-API/products/024.primetools.web.api/PrimeTools.py'
                sh 'pdoc --html /var/lib/jenkins/workspace/jfile-100D-PrimeTools-API/products/024.primetools.web.api/flask_api.py'
            }
        }
    }
    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful.'
            setBuildStatus("Build succeeded", "SUCCESS");
            withCredentials([string(credentialsId: 'github-pat-jenkins', variable: 'PAT')]) {
              sh 'git branch -f documentation'
              sh 'git checkout documentation'
              sh 'git add --ignore-errors /var/lib/jenkins/workspace/jfile-100D-PrimeTools-API/products/024.primetools.web.api/*.html'
              sh 'git commit -a -m "Autobuild via Jenkins"'
              sh 'git push --set-upstream https://jenkins:$PAT@github.com/amazingproducer/100Days documentation'
            }
            sh 'sudo supervisorctl restart prime-tools'
        }
        failure {
            echo 'This will run only if failed'
            setBuildStatus("Build failed", "FAILURE");
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}
