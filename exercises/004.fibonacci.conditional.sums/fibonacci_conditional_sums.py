#    Each new term in the Fibonacci sequence is generated by adding the previous
#    two terms. By starting with 1 and 2, the first 10 terms will be:
#
#    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
#    By considering the terms in the Fibonacci sequence whose values do not
#    exceed four million, find the sum of the even-valued terms.

# Let's make a class for all this and give it a silly name.
class nacho_fibby:
# Let's make a function which accepts n and returns the n-th fibonacci number.
    def fib(n):
        if n == 0:
            return 0
        if n == 1:
            return 1
        return nacho_fibby.fib(n - 1) + nacho_fibby.fib(n - 2)

# Let's make a function which accepts limiting integer as and outputs a list of
# fibonacci numbers, in sequence, each of which is of lesser value than the
# limiting integer.
    def list(limit=4000000):
        n = 0 # Let's create a variable for our fibonacci number.
        i = 0 # Let's create a variable for its index.
        f = [] # Let's create a list for our output.
        while n < limit: # Let's stop before we hit the limit.
            n = nacho_fibby.fib(i) # Lets track this so we know when we hit the limit.
            if n < limit: # Oh darn. Let's make sure n isn't too big now.
                f.append(n) # Let's add this number to the list.
            i += 1 # Let's increase the index value by one to keep things going.
        return f

# Now that we have some tools to work with, let's try solving this problem.
    def solve():
        sum = 0 # Let's create a variable to hold our eventual output.
        for i in nacho_fibby.list(): # Oh dear. Let's iterate anyway.
            if i % 2 == 0: # Let's make sure we're working with an even number.
                sum += i # Let's start accumulating value
        return sum

print(nacho_fibby.solve()) # I apparently get 4613732. How can I prove this?
